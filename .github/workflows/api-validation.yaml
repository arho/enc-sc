name: FastAPI Quality Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  PYTHON_VERSION: "3.11"

jobs:
  quality-checks:
    name: Code Quality & Testing
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        id: setup-python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: pip-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            pip-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-

      - name: Install dependencies
        working-directory: ./app
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt; fi

      - name: Code formatting check with Black
        working-directory: ./app
        run: |
          black --check --diff .
        continue-on-error: true

      - name: Import sorting check with isort
        working-directory: ./app
        run: |
          isort --check-only --diff .
        continue-on-error: true

      - name: Linting with flake8
        working-directory: ./app
        run: |
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics

      - name: Type checking with mypy
        working-directory: ./app
        run: |
          mypy .
        continue-on-error: true

      - name: Security linting with bandit
        working-directory: ./app
        run: |
          bandit -r . -f json -o bandit-report.json
          bandit -r . --severity-level medium
        continue-on-error: true

      - name: Dependency vulnerability check with safety
        working-directory: ./app
        run: |
          safety check --json --output safety-report.json || true
          safety check
        continue-on-error: true

      - name: Upload coverage to GitHub
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: htmlcov/

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results
          path: |
            bandit-report.json
            safety-report.json

      - name: Comment PR with coverage
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            try {
              const coverage = fs.readFileSync('./app/coverage.xml', 'utf8');
              const match = coverage.match(/line-rate="([^"]+)"/);
              if (match) {
                const coveragePercent = Math.round(parseFloat(match[1]) * 100);
                const comment = `## 📊 Code Coverage Report
                
                Current coverage: **${coveragePercent}%**
                
                ${coveragePercent >= 80 ? '✅ Coverage meets minimum threshold (80%)' : '⚠️ Coverage below minimum threshold (80%)'}
                
                [View detailed coverage report in artifacts](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})`;
                
                github.rest.issues.createComment({
                  issue_number: context.issue.number,
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  body: comment
                });
              }
            } catch (error) {
              console.log('Could not read coverage report:', error);
            }

  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    needs: quality-checks
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner in repo mode
        working-directory: ./app
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Run CodeQL Analysis
        working-directory: ./app
        uses: github/codeql-action/analyze@v3
        with:
          languages: python

  build-ready:
    name: Build Readiness Check
    runs-on: ubuntu-latest
    needs: [quality-checks, security-scan]
    if: always()
    steps:
      - name: Check if ready to build
        run: |
          if [[ "${{ needs.quality-checks.result }}" == "success" && "${{ needs.security-scan.result }}" == "success" ]]; then
            echo "✅ All quality checks passed. Ready to build!"
            echo "BUILD_READY=true" >> $GITHUB_ENV
          else
            echo "❌ Quality checks failed. Build blocked."
            echo "BUILD_READY=false" >> $GITHUB_ENV
            exit 1
          fi

      - name: Build status summary
        run: |
          echo "## Build Readiness Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- Quality Checks: ${{ needs.quality-checks.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Security Scan: ${{ needs.security-scan.result }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          if [[ "$BUILD_READY" == "true" ]]; then
            echo "✅ **Ready to proceed with Docker build**" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Build blocked due to quality/security issues**" >> $GITHUB_STEP_SUMMARY
          fi